---
import Layout from "../../layouts/StaticPageLayout.astro";
import { getCollection, render } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

export const prerender = true;

const { post } = Astro.props;
const { Content } = await post.render();

// Get related posts
const allPosts = await getCollection("blog");
const relatedPosts = allPosts
  .filter(
    (p) =>
      p.slug !== post.slug &&
      p.data.tags?.some((tag) => post.data.tags?.includes(tag)),
  )
  .slice(0, 3);

// Get all tools for sidebar
const tools = [
  {
    name: "Fancy Text Generator",
    href: "/tools/fancy-text-generator",
    icon: "✨",
    description: "Transform text into fancy, stylized characters",
  },
  {
    name: "Bold & Italic Converter",
    href: "/tools/bold-italic-converter",
    icon: "🔤",
    description: "Convert text to bold and italic styles",
  },
  {
    name: "High Valyrian Translator",
    href: "/tools/high-valyrian-translator",
    icon: "🐉",
    description: "Translate English to High Valyrian",
  },
  {
    name: "Case Converter",
    href: "/tools/case-converter",
    icon: "🔄",
    description: "Convert text between different cases",
  },
  {
    name: "Text Counter",
    href: "/tools/text-counter",
    icon: "📊",
    description: "Count characters, words, and lines",
  },
];

// Format date
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(date);
};
---

<Layout title={post.data.title} description={post.data.description}>
  <div class="grid grid-cols-1 lg:grid-cols-[280px_1fr_300px] gap-8 max-w-7xl mx-auto p-4 lg:p-8">
    <!-- Left Sidebar - Table of Contents -->
    <aside class="lg:sticky lg:top-20 lg:h-fit lg:max-h-[calc(100vh-5rem)] lg:overflow-y-auto">
      <div class="bg-white/5 border border-white/10 rounded-2xl p-4 backdrop-blur-md">
        <div class="flex justify-between items-center mb-4">
          <span class="text-sm font-semibold text-white">Table of Contents</span>
          <button
            class="bg-none border-none text-gray-400 cursor-pointer p-2 rounded-lg transition-all duration-200 hover:bg-white/10 hover:text-white"
            id="tocToggle"
            aria-label="Toggle table of contents"
          >
            <svg
              class="toc-icon w-5 h-5"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </button>
        </div>
        <nav class="toc-nav transition-all duration-300" id="tocNav">
          <ul class="list-none p-0 m-0" id="tocList">
            <!-- Table of contents will be populated by JavaScript -->
          </ul>
        </nav>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="min-w-0">
      <article>
        <!-- Header -->
        <header class="mb-12 text-center">
          <div class="mb-6">
            <span class="inline-flex items-center gap-2 text-gray-400 text-sm font-medium">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              <FormattedDate date={post.data.pubDate} />
            </span>
          </div>

          <h1 class="text-4xl lg:text-5xl font-bold text-white mb-6 leading-tight">
            {post.data.title}
          </h1>

          {
            post.data.description && (
              <p class="text-lg lg:text-xl text-gray-400 max-w-2xl mx-auto mb-6 leading-relaxed">
                {post.data.description}
              </p>
            )
          }

          {
            post.data.tags && post.data.tags.length > 0 && (
              <div class="flex flex-wrap justify-center gap-3">
                {post.data.tags.map((tag) => (
                  <span class="bg-yellow-400/10 text-yellow-400 px-4 py-2 rounded-full text-sm font-medium border border-yellow-400/20 hover:bg-yellow-400/20 hover:border-yellow-400/40 transition-all duration-200">
                    #{tag}
                  </span>
                ))}
              </div>
            )
          }
        </header>

        <!-- Featured Image -->
        {
          post.data.image && (
            <div class="mb-12">
              <Image
                width={1200}
                height={600}
                src={post.data.image}
                alt={post.data.title}
                class="w-full h-auto rounded-2xl shadow-2xl"
                loading="lazy"
              />
            </div>
          )
        }

        <!-- Content -->
        <div 
          class="prose prose-invert max-w-none mb-12
            prose-h1:text-3xl prose-h1:font-bold prose-h1:text-white prose-h1:mb-6 prose-h1:mt-8 prose-h1:scroll-mt-24
            prose-h2:text-2xl prose-h2:font-bold prose-h2:text-yellow-300 prose-h2:mb-4 prose-h2:mt-8 prose-h2:border-b prose-h2:border-yellow-400/30 prose-h2:pb-2 prose-h2:scroll-mt-24
            prose-h3:text-xl prose-h3:font-bold prose-h3:text-gray-200 prose-h3:mb-3 prose-h3:mt-6 prose-h3:scroll-mt-24
            prose-h4:text-lg prose-h4:font-semibold prose-h4:text-gray-200 prose-h4:mb-3 prose-h4:mt-5 prose-h4:scroll-mt-24
            prose-h5:font-semibold prose-h5:text-gray-200 prose-h5:mb-2 prose-h5:mt-4 prose-h5:scroll-mt-24
            prose-h6:font-semibold prose-h6:text-gray-200 prose-h6:mb-2 prose-h6:mt-4 prose-h6:scroll-mt-24
            prose-p:text-base prose-p:text-gray-300 prose-p:leading-relaxed prose-p:mb-4
            prose-a:text-yellow-400 prose-a:underline prose-a:decoration-yellow-400/40 prose-a:underline-offset-2 prose-a:transition-all prose-a:duration-200 hover:prose-a:text-yellow-300 hover:prose-a:decoration-yellow-400/60
            prose-strong:text-white prose-strong:font-semibold
            prose-em:text-gray-300 prose-em:italic
            prose-code:text-yellow-300 prose-code:bg-black/30 prose-code:px-2 prose-code:py-1 prose-code:rounded prose-code:text-sm
            prose-pre:bg-black/40 prose-pre:border prose-pre:border-white/10 prose-pre:rounded-lg prose-pre:overflow-x-auto
            prose-blockquote:border-l-4 prose-blockquote:border-yellow-400 prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-gray-400 prose-blockquote:my-6
            prose-ul:list-disc prose-ul:pl-6 prose-ul:text-gray-300 prose-ul:mb-4
            prose-ol:list-decimal prose-ol:pl-6 prose-ol:text-gray-300 prose-ol:mb-4
            prose-li:mb-2
            prose-table:w-full prose-table:border-collapse prose-table:my-6
            prose-th:bg-yellow-400/10 prose-th:text-yellow-400 prose-th:font-semibold prose-th:p-3 prose-th:text-left
            prose-td:border-b prose-td:border-white/10 prose-td:p-3 prose-td:text-gray-300
            prose-hr:border-t prose-hr:border-yellow-400/50 prose-hr:my-8
            prose-img:rounded-lg prose-img:shadow-lg prose-img:my-6"
          id="blogContent"
        >
          <Content />
        </div>
      </article>
    </main>

    <!-- Right Sidebar - Tools -->
    <aside class="lg:sticky lg:top-20 lg:h-fit lg:max-h-[calc(100vh-5rem)] lg:overflow-y-auto">
      <div class="bg-white/5 border border-white/10 rounded-2xl p-6 backdrop-blur-md">
        <h3 class="text-lg font-semibold text-white mb-6">Text Tools</h3>
        
        <div class="flex flex-col gap-4 mb-8">
          {
            tools.map((tool) => (
              <a 
                href={tool.href} 
                class="flex items-start gap-3 p-4 bg-white/5 border border-white/10 rounded-xl text-decoration-none transition-all duration-200 hover:bg-white/10 hover:border-yellow-400/30 hover:-translate-y-0.5"
              >
                <div class="text-2xl flex-shrink-0">{tool.icon}</div>
                <div class="flex-1 min-w-0">
                  <h4 class="text-sm font-semibold text-white mb-1">
                    {tool.name}
                  </h4>
                  <p class="text-xs text-gray-400">
                    {tool.description}
                  </p>
                </div>
              </a>
            ))
          }
        </div>

        <div class="border-t border-white/10 pt-6">
          <h4 class="text-base font-semibold text-white mb-4">Quick Links</h4>
          <ul class="list-none p-0 m-0 flex flex-col gap-2">
            <li>
              <a 
                href="/tools" 
                class="block text-gray-400 no-underline px-3 py-2 rounded-lg transition-all duration-200 hover:text-white hover:bg-white/10"
              >
                All Tools
              </a>
            </li>
            <li>
              <a 
                href="/blog" 
                class="block text-gray-400 no-underline px-3 py-2 rounded-lg transition-all duration-200 hover:text-white hover:bg-white/10"
              >
                Blog
              </a>
            </li>
            <li>
              <a 
                href="/unicode" 
                class="block text-gray-400 no-underline px-3 py-2 rounded-lg transition-all duration-200 hover:text-white hover:bg-white/10"
              >
                Unicode
              </a>
            </li>
          </ul>
        </div>
      </div>
    </aside>
  </div>

  <!-- Related Posts Section (Full Width) -->
  {
    relatedPosts.length > 0 && (
      <section class="mt-16 py-12 bg-black/20 border-t border-white/10">
        <div class="max-w-6xl mx-auto px-4 lg:px-8">
          <h2 class="text-3xl lg:text-4xl font-bold text-white text-center mb-8">
            Related Articles
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl mx-auto">
            {relatedPosts.map((relatedPost) => (
              <article class="bg-white/5 border border-white/10 rounded-2xl overflow-hidden transition-all duration-300 hover:border-yellow-400/30 hover:-translate-y-1 hover:shadow-2xl backdrop-blur-md">
                {relatedPost.data.image && (
                  <a
                    href={`/blog/${relatedPost.slug}`}
                    class="block overflow-hidden"
                  >
                    <img
                      src={relatedPost.data.image}
                      alt={relatedPost.data.title}
                      class="w-full h-40 object-cover transition-transform duration-300 hover:scale-105"
                    />
                  </a>
                )}
                <div class="p-5">
                  <h3 class="text-lg font-semibold mb-2">
                    <a
                      href={`/blog/${relatedPost.slug}`}
                      class="text-white no-underline transition-colors duration-200 hover:text-yellow-400"
                    >
                      {relatedPost.data.title}
                    </a>
                  </h3>
                  <p class="text-sm text-gray-400 mb-3 line-clamp-2 leading-relaxed">
                    {relatedPost.data.description || ""}
                  </p>
                  <div class="flex items-center gap-2 text-xs text-gray-500">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                      <line x1="16" y1="2" x2="16" y2="6" />
                      <line x1="8" y1="2" x2="8" y2="6" />
                      <line x1="3" y1="10" x2="21" y2="10" />
                    </svg>
                    <span>{formatDate(relatedPost.data.pubDate)}</span>
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>
      </section>
    )
  }
</Layout>

<script>
  // Table of Contents functionality
  document.addEventListener("DOMContentLoaded", function () {
    const tocToggle = document.getElementById(
      "tocToggle",
    ) as HTMLButtonElement | null;
    const tocNav = document.getElementById("tocNav") as HTMLElement | null;
    const tocList = document.getElementById(
      "tocList",
    ) as HTMLUListElement | null;
    const blogContent = document.getElementById(
      "blogContent",
    ) as HTMLElement | null;

    if (!tocToggle || !tocNav || !tocList || !blogContent) return;

    // Toggle TOC visibility
    tocToggle.addEventListener("click", function () {
      if (!tocNav) return;
      tocNav.classList.toggle("max-h-0");
      tocNav.classList.toggle("overflow-hidden");
      tocNav.classList.toggle("max-h-full");
      const isCollapsed = tocNav.classList.contains("max-h-0");
      tocToggle.setAttribute("aria-expanded", (!isCollapsed).toString());
    });

    // Generate table of contents
    function generateTOC() {
      if (!blogContent || !tocList) return;

      const headings = blogContent.querySelectorAll("h2, h3, h4");
      const tocItems: Array<{
        level: number;
        text: string | null;
        id: string;
        element: Element;
      }> = [];

      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.charAt(1));
        const text = heading.textContent;
        const id = heading.id || `heading-${index}`;

        // Add ID if not present
        if (!heading.id) {
          heading.id = id;
        }

        tocItems.push({
          level,
          text,
          id,
          element: heading,
        });
      });

      // Render TOC
      tocList.innerHTML = tocItems
        .map((item) => {
          const paddingClass = {
            2: "pl-0",
            3: "pl-4",
            4: "pl-8",
          }[item.level] || "pl-0";

          const textSizeClass = {
            2: "text-sm",
            3: "text-xs",
            4: "text-xs",
          }[item.level] || "text-sm";

          const fontWeightClass = item.level === 2 ? "font-semibold" : "font-normal";
          const textColorClass = item.level === 2 ? "text-yellow-400" : "text-gray-400";

          return `
            <li class="mb-1 ${paddingClass}">
              <a href="#${item.id}" class="toc-link block ${textSizeClass} ${textColorClass} ${fontWeightClass} no-underline rounded px-2 py-1 transition-all duration-200 hover:text-white hover:bg-white/10">
                ${item.text || ""}
              </a>
            </li>
          `;
        })
        .join("");

      // Add click handlers for smooth scrolling
      tocList.querySelectorAll(".toc-link").forEach((link) => {
        link.addEventListener("click", function (e: Event) {
          e.preventDefault();
          const target = e.target as HTMLAnchorElement;
          const targetId = target.getAttribute("href")?.substring(1);
          if (!targetId) return;

          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            const headerHeight = 80;
            const elementPosition =
              (targetElement as HTMLElement).offsetTop - headerHeight;

            window.scrollTo({
              top: elementPosition,
              behavior: "smooth",
            });
          }
        });
      });
    }

    // Generate TOC after content is loaded
    generateTOC();

    // Highlight current section in TOC
    function highlightCurrentSection() {
      if (!blogContent || !tocList) return;

      const headings = Array.from(
        blogContent.querySelectorAll("h2, h3, h4, h5, h6"),
      );
      const scrollPosition = window.scrollY + 100;

      let currentHeading = headings[0] as HTMLElement;

      for (let i = headings.length - 1; i >= 0; i--) {
        const heading = headings[i] as HTMLElement;
        if (heading.offsetTop <= scrollPosition) {
          currentHeading = heading;
          break;
        }
      }

      // Remove previous active class
      tocList.querySelectorAll(".toc-link").forEach((link) => {
        link.classList.remove("text-yellow-400", "bg-yellow-400/10");
        link.classList.add("text-gray-400");
      });

      // Add active class to current section
      if (currentHeading) {
        const activeLink = tocList.querySelector(
          `a[href="#${currentHeading.id}"]`,
        ) as HTMLAnchorElement | null;
        if (activeLink) {
          activeLink.classList.remove("text-gray-400");
          activeLink.classList.add("text-yellow-400", "bg-yellow-400/10");
        }
      }
    }

    // Update TOC highlighting on scroll
    window.addEventListener("scroll", highlightCurrentSection);

    // Initial highlight
    highlightCurrentSection();
  });
</script>