---
import Layout from '../../layouts/StaticPageLayout.astro';
import { getCollection } from 'astro:content';

export const prerender = true;

// Get all Unicode characters
const allUnicodeChars = await getCollection('unicode');

// Group by category with proper typing
const categories: Record<string, { title: string; description: string; characters: typeof allUnicodeChars }> = {
  'zero-width': {
    title: 'Zero Width Characters',
    description: 'Characters that have no width when rendered but still exist in the text.',
    characters: []
  },
  'braille': {
    title: 'Space Characters',
    description: 'Various types of space characters with different widths and behaviors.',
    characters: []
  },
  'invisible': {
    title: 'Special Invisible Characters',
    description: 'Special characters with unique properties that are not visible when rendered.',
    characters: []
  },
};

// Sort characters by order and populate categories
allUnicodeChars.sort((a, b) => a.data.order - b.data.order);
allUnicodeChars.forEach(char => {
  if (categories[char.data.category]) {
    categories[char.data.category].characters.push(char);
  }
});
---

<Layout title="Unicode Invisible Characters - InvisibleText.me" description=''>
  <div class="max-w-1200 mx-auto px-4 py-8">
    <div class="text-center mb-8">
      <h1 class="text-5xl font-bold text-yellow-400 mb-4">Unicode Invisible Characters</h1>
      <p class="text-lg text-gray-300 max-w-3xl mx-auto leading-relaxed">
        Explore the world of invisible Unicode characters and learn how they can be used in various applications.
      </p>
    </div>
    
    <div class="space-y-12">
      {Object.entries(categories).map(([categoryId, category]) => (
        <div class="space-y-6">
          <div>
            <h2 class="text-3xl font-bold text-white mb-2 pb-2 border-b-2 border-yellow-400 inline-block">{category.title}</h2>
            <p class="text-gray-300">{category.description}</p>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {category.characters.map(character => (
              <div class="bg-navy-800 border border-navy-700 rounded-xl p-6 transition-all duration-200 hover:border-yellow-400">
                <div class="mb-4">
                  <h3 class="text-xl font-semibold text-white mb-2 transition-colors duration-200 group-hover:text-yellow-400">{character.data.title}</h3>
                  <div class="inline-block bg-navy-700 text-yellow-400 font-mono px-3 py-1 rounded text-sm">{character.data.code}</div>
                </div>
                <p class="text-gray-300 mb-6 line-clamp-3">{character.data.description}</p>
                <div class="flex justify-between items-center">
                  <a href={`/unicode/${character.slug}`} class="inline-flex items-center gap-1 text-yellow-400 font-medium transition-all duration-200 hover:underline">
                    View Details
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M5 12h14"></path>
                      <path d="m12 5 7 7-7 7"></path>
                    </svg>
                  </a>
                  <button class="bg-transparent border-none text-gray-300 cursor-pointer p-2 rounded transition-all duration-200 hover:text-white hover:bg-navy-700 flex items-center justify-center" data-copy={character.slug} title="Copy Character">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
    
    <div class="mt-16">
      <h2 class="text-3xl font-bold text-white text-center mb-6">How to Use Invisible Characters</h2>
      <p class="text-gray-300 text-center max-w-4xl mx-auto mb-8 leading-relaxed">
        Invisible characters can be used in various ways across different platforms and applications:
      </p>
      <ul class="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
        <li class="flex items-start gap-3">
          <div class="text-yellow-400 mt-1 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 6L9 17l-5-5"></path>
            </svg>
          </div>
          <span class="text-gray-300">
            <strong class="text-white">Social Media:</strong> Create unique usernames, empty posts, or add invisible formatting to your content.
          </span>
        </li>
        <li class="flex items-start gap-3">
          <div class="text-yellow-400 mt-1 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 6L9 17l-5-5"></path>
            </svg>
          </div>
          <span class="text-gray-300">
            <strong class="text-white">Gaming:</strong> Create distinctive usernames or send hidden messages in game chats.
          </span>
        </li>
        <li class="flex items-start gap-3">
          <div class="text-yellow-400 mt-1 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 6L9 17l-5-5"></path>
            </svg>
          </div>
          <span class="text-gray-300">
            <strong class="text-white">Web Development:</strong> Format text without visible spaces or create special layouts.
          </span>
        </li>
        <li class="flex items-start gap-3">
          <div class="text-yellow-400 mt-1 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 6L9 17l-5-5"></path>
            </svg>
          </div>
          <span class="text-gray-300">
            <strong class="text-white">Messaging:</strong> Send blank messages or create special formatting in messaging apps.
          </span>
        </li>
      </ul>
    </div>
  </div>
</Layout>

<script>
  // Character codes with proper typing
  const characters: Record<string, string> = {
    'zero-width-space': '\u200B',
    'zero-width-joiner': '\u200D',
    'zero-width-non-joiner': '\u200C',
    'hangul-filler': '\u3164',
    'space': ' ',
    'no-break-space': '\u00A0',
    'en-space': '\u2002',
    'em-space': '\u2003',
    'thin-space': '\u2009',
    'word-joiner': '\u2060',
    'soft-hyphen': '\u00AD',
    'left-to-right-mark': '\u200E',
    'right-to-left-mark': '\u200F',
    'left-to-right-embedding': '\u202A',
    'right-to-left-embedding': '\u202B'
  };

  // Copy buttons
  document.querySelectorAll('[data-copy]').forEach(button => {
    button.addEventListener('click', () => {
      const copyData = button.getAttribute('data-copy');
      let textToCopy = '';
      
      if (copyData && copyData in characters) {
        textToCopy = characters[copyData];
      } else {
        // Default to hangul filler if character not found
        textToCopy = characters['hangul-filler'];
      }
      
      navigator.clipboard.writeText(textToCopy)
        .then(() => {
          // Show copied state
          const originalHTML = button.innerHTML;
          button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 6 9 17l-5-5"/>
            </svg>
          `;
          
          setTimeout(() => {
            button.innerHTML = originalHTML;
          }, 2000);
          
          // Show toast
          showToast('Copied to clipboard!');
        })
        .catch(err => {
          console.error('Failed to copy: ', err);
          showToast('Failed to copy');
        });
    });
  });
  
  // Toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-8 right-8 bg-yellow-200 text-black px-6 py-3 rounded-lg shadow-lg z-50 transform translate-y-4 opacity-0 transition-all duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    // Trigger animation
    setTimeout(() => {
      toast.classList.remove('translate-y-4', 'opacity-0');
    }, 10);
    
    // Remove after animation
    setTimeout(() => {
      toast.classList.add('translate-y-4', 'opacity-0');
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 300);
    }, 2000);
  }
</script>