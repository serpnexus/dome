---
import { getLangFromUrl, useTranslations } from "../i18n/utils";

// Get the current language and translation function
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// FAQ items array
const faqs = [
  {
    question: t("faq.q1"),
    answer: t("faq.a1")
  },
  {
    question: t("faq.q2"),
    answer: t("faq.a2")
  },
  {
    question: t("faq.q3"),
    answer: t("faq.a3")
  },
  {
    question: t("faq.q4"),
    answer: t("faq.a4")
  },
  {
    question: t("faq.q5"),
    answer: t("faq.a5")
  },
  {
    question: t("faq.q6"),
    answer: t("faq.a6")
  }
];
---

<section class="py-16">
  <div class="max-w-1200 mx-auto px-6">
    <h2 class="text-center text-2xl font-bold text-yellow-400 mb-8">{t("faq.title")}</h2>
    
    <div class="max-w-3xl mx-auto flex flex-col gap-4">
      {faqs.map((faq, index) => (
        <div class="border border-white/20 rounded-lg overflow-hidden">
          <button 
            class="w-full flex justify-between items-center p-4 text-left font-medium bg-white/10 transition-all duration-200 hover:bg-white/20 cursor-pointer border-none focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-offset-2 focus:ring-offset-navy-900"
            data-faq-toggle
            aria-expanded="false"
            aria-controls={`faq-answer-${index}`}
          >
            <h3 class="text-yellow-400 text-base font-semibold">{faq.question}</h3>
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="24" 
              height="24" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              class="text-yellow-400 w-5 h-5 transition-transform duration-200 transform"
            >
              <path d="m6 9 6 6 6-6"/>
            </svg>
          </button>
          <div 
            id={`faq-answer-${index}`}
            class="p-4 bg-white/10 text-gray-300 hidden"
            role="region"
            aria-labelledby={`faq-question-${index}`}
          >
            <p>{faq.answer}</p>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  // This script handles the accordion functionality
  document.addEventListener('DOMContentLoaded', () => {
    const faqQuestions = document.querySelectorAll('[data-faq-toggle]');
    
    faqQuestions.forEach((question, index) => {
      question.addEventListener('click', (e) => {
        // Prevent default behavior
        e.preventDefault();
        
        const faqItem = question.closest('div');
        const answer = faqItem?.querySelector(`#faq-answer-${index}`);
        const icon = question.querySelector('svg');
        const isExpanded = question.getAttribute('aria-expanded') === 'true';
        
        // Toggle the current FAQ item
        if (answer) {
          if (isExpanded) {
            answer.classList.add('hidden');
            question.setAttribute('aria-expanded', 'false');
            icon?.classList.remove('rotate-180');
          } else {
            answer.classList.remove('hidden');
            question.setAttribute('aria-expanded', 'true');
            icon?.classList.add('rotate-180');
          }
        }
        
        // Close other FAQ items
        faqQuestions.forEach((otherQuestion, otherIndex) => {
          if (otherQuestion !== question) {
            const otherItem = otherQuestion.closest('div');
            const otherAnswer = otherItem?.querySelector(`#faq-answer-${otherIndex}`);
            const otherIcon = otherQuestion.querySelector('svg');
            
            if (otherAnswer) {
              otherAnswer.classList.add('hidden');
              otherQuestion.setAttribute('aria-expanded', 'false');
              otherIcon?.classList.remove('rotate-180');
            }
          }
        });
      });
    });
  });
</script>

