---
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section class="invisible-text-generator">
  <div class="container">
    <h1 class="title">{t("invisibletext.title")}</h1>
    <p class="description">{t("invisibletext.description")}</p>
    
    <div class="methods-grid">
      <!-- Method 1: Quick Copy -->
      <div class="method-card">
        <h2 class="method-title">{t("invisibletext.method1.title")}</h2>
        <div class="quick-copy-buttons">
          <button class="copy-button" data-count="3" data-tooltip={t("invisibletext.copy")}>
            <span>{t("invisibletext.method1.small")}</span>
            <svg class="copy-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
            <svg class="check-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 6 9 17l-5-5"/>
            </svg>
          </button>
          <button class="copy-button" data-count="10" data-tooltip={t("invisibletext.copy")}>
            <span>{t("invisibletext.method1.medium")}</span>
            <svg class="copy-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
            <svg class="check-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 6 9 17l-5-5"/>
            </svg>
          </button>
          <button class="copy-button" data-count="30" data-tooltip={t("invisibletext.copy")}>
            <span>{t("invisibletext.method1.large")}</span>
            <svg class="copy-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
            <svg class="check-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 6 9 17l-5-5"/>
            </svg>
          </button>
        </div>
        <p class="method-description">{t("invisibletext.method1.description")}</p>
        <p class="method-note">{t("invisibletext.method1.fallback")}</p>
      </div>

      <!-- Method 2: Character Selection -->
      <div class="method-card">
        <h2 class="method-title">{t("invisibletext.method2.title")}</h2>
        <p class="method-description">{t("invisibletext.method2.description")}</p>
        <div class="character-selector">
          <select id="characterType" class="character-select">
            <option value="zwsp">Zero Width Space (U+200B)</option>
            <option value="zwj">Zero Width Joiner (U+200D)</option>
            <option value="zwnj">Zero Width Non-Joiner (U+200C)</option>
            <option value="hangul" selected>Hangul Filler (U+3164)</option>
            <option value="wj">Word Joiner (U+2060)</option>
          </select>
          <div class="character-actions">
            <button id="copySelected" class="action-button" data-tooltip={t("invisibletext.copy")}>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
              </svg>
            </button>
            <button id="previewSelected" class="action-button" data-tooltip={t("invisibletext.preview")}>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="character-info">
          <h3 id="selectedCharName">Hangul Filler</h3>
          <p id="selectedCharDesc">An invisible character mainly used in the Korean script. In gaming and social media, it can be employed to create invisible names or disguise messages.</p>
        </div>
      </div>

      <!-- Method 3: Custom Generator -->
      <div class="method-card">
        <h2 class="method-title">{t("invisibletext.method3.title")}</h2>
        <p class="method-description">{t("invisibletext.method3.description")}</p>
        <div class="custom-generator">
          <div class="generator-controls">
            <select id="customCharType" class="character-select">
              <option value="zwsp">Zero Width Space (U+200B)</option>
              <option value="zwj">Zero Width Joiner (U+200D)</option>
              <option value="zwnj">Zero Width Non-Joiner (U+200C)</option>
              <option value="hangul" selected>Hangul Filler (U+3164)</option>
              <option value="wj">Word Joiner (U+2060)</option>
            </select>
            <div class="count-control">
              <label for="customCount">{t("invisibletext.count")}</label>
              <input type="number" id="customCount" min="1" max="1000" value="5" />
            </div>
          </div>
          <div class="generator-actions">
            <button id="generateCustom" class="primary-button">
              <span>{t("invisibletext.generate")}</span>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2v4M12 18v4m-8.93-8.93 2.83 2.83m11.31 0 2.83-2.83M2 12h4M18 12h4m-13.07 7.07 2.83-2.83m11.31 0 2.83 2.83"/>
              </svg>
            </button>
            <button id="copyCustom" class="action-button" data-tooltip={t("invisibletext.copy")}>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Method 4: Advanced Options -->
      <div class="method-card">
        <h2 class="method-title">{t("invisibletext.method4.title")}</h2>
        <p class="method-description">{t("invisibletext.method4.description")}</p>
        <div class="advanced-options">
          <label class="option-label">
            <input type="checkbox" id="mixCharacters" />
            <span>{t("invisibletext.method4.mix")}</span>
          </label>
          <label class="option-label">
            <input type="checkbox" id="addPattern" />
            <span>{t("invisibletext.method4.pattern")}</span>
          </label>
          <div class="count-control">
            <label for="advancedCount">{t("invisibletext.count")}</label>
            <input type="number" id="advancedCount" min="1" max="5000" value="20" />
          </div>
          <button id="generateAdvanced" class="primary-button full-width">
            {t("invisibletext.method4.generateAdvanced")}
          </button>
        </div>
      </div>
    </div>

    <!-- Test Area -->
    <div class="test-area-container">
      <h2>{t("invisibletext.testarea.title")}</h2>
      <p>{t("invisibletext.testarea.description")}</p>
      <div class="test-area-wrapper">
        <textarea id="testArea" placeholder={t("invisibletext.testarea.placeholder")}></textarea>
      </div>
      <div class="test-area-footer">
        <div class="character-count">
          {t("invisibletext.testarea.characters")}: <span id="charCount">0</span>
        </div>
        <div class="test-area-actions">
          <button id="copyTest" class="action-button" data-tooltip={t("invisibletext.copy")}>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
          </button>
          <button id="clearTest" class="action-button" data-tooltip={t("invisibletext.clear")}>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 6h18M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  :root {
    --primary: #0f172a;
    --secondary: #1e293b;
    --accent: #fbbf24;
    --surface: #f8fafc;
    --text: #1e293b;
    --text-muted: #64748b;
    --border: #e2e8f0;
    --radius: 0.5rem;
    --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--accent);
    margin-bottom: 1rem;
    text-align: center;
  }

  .description {
    font-size: 1.125rem;
    color: var(--surface);
    margin-bottom: 2rem;
    text-align: center;
  }

  .methods-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .method-card {
    
    border: 1px solid var(--accent);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
  }

  .method-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--primary);
  }

  .method-description {
    color: var(--text);
    margin-bottom: 1rem;
  }

  .method-note {
    font-size: 0.875rem;
    color: var(--text-muted);
    margin-top: 0.5rem;
  }

  /* Buttons */
  .copy-button, .action-button, .primary-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: var(--radius);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .copy-button, .primary-button {
    background: var(--primary);
    color: white;
  }

  .copy-button:hover, .primary-button:hover {
    background: var(--secondary);
    transform: translateY(-1px);
  }

  .action-button {
    background: var(--surface);
    color: var(--primary);
    border: 1px solid var(--border);
    padding: 0.5rem;
  }

  .action-button:hover {
    background: var(--accent);
    transform: translateY(-1px);
  }

  .full-width {
    width: 100%;
  }

  .quick-copy-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .check-icon {
    display: none;
  }

  .copy-button[data-copied="true"] .copy-icon {
    display: none;
  }

  .copy-button[data-copied="true"] .check-icon {
    display: block;
  }

  /* Form elements */
  .character-select, input[type="number"] {
    padding: 0.5rem;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    font-size: 0.875rem;
  }

  .character-select {
    flex: 1;
  }

  input[type="number"] {
    width: 80px;
  }

  .character-selector {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .character-actions {
    display: flex;
    gap: 0.5rem;
  }

  .character-info h3 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .character-info p {
    font-size: 0.875rem;
    color: var(--text-muted);
  }

  .generator-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .count-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .generator-actions {
    display: flex;
    gap: 0.5rem;
  }

  .advanced-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .option-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    cursor: pointer;
  }

  .option-label input {
    margin: 0;
  }

  .test-area-container {
    border: 1px solid var(--accent);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
  }

  .test-area-container h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--primary);
  }

  .test-area-container p {
    color: var(--text);
    margin-bottom: 1rem;
  }

  .test-area-wrapper {
    position: relative;
    margin-bottom: 1rem;
  }

  textarea {
    width: 100%;
    min-height: 120px;
    padding: 0.75rem;
    border: 1px solid var(--accent);
    border-radius: var(--radius);
    font-family: inherit;
    font-size: 0.875rem;
    resize: vertical;
  }

  .test-area-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .character-count {
    font-size: 0.875rem;
    color: var(--text-muted);
  }

  .test-area-actions {
    display: flex;
    gap: 0.5rem;
  }

  /* SVG icons */
  svg {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
  }

  /* Tooltip */
  [data-tooltip] {
    position: relative;
  }

  [data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: var(--primary);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    white-space: nowrap;
    z-index: 10;
  }

  /* Toast */
  .toast {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    background: var(--primary);
    color: white;
    padding: 0.75rem 1rem;
    border-radius: var(--radius);
    font-size: 0.875rem;
    z-index: 1000;
    opacity: 0;
    transform: translateY(1rem);
    transition: all 0.3s ease;
  }

  .toast.show {
    opacity: 1;
    transform: translateY(0);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .methods-grid {
      grid-template-columns: 1fr;
    }
    
    .character-selector {
      flex-direction: column;
    }
    
    .generator-controls {
      flex-direction: column;
    }
    
    .quick-copy-buttons {
      justify-content: center;
    }
  }
</style>

<script>
  const characters = {
    zwsp: { char: '\u200B', name: 'Zero Width Space', description: 'An invisible character for formatting digital text. It allows word breaks or line breaks without adding a visible space.' },
    zwj: { char: '\u200D', name: 'Zero Width Joiner', description: 'An empty character for joining two characters without any visible separation. It is commonly used in creating complex scripts and emoji sequences.' },
    zwnj: { char: '\u200C', name: 'Zero Width Non-Joiner', description: 'Prevents characters from joining together. This is particularly useful in scripts where certain character combinations should remain separate.' },
    hangul: { char: '\u3164', name: 'Hangul Filler', description: 'An invisible character mainly used in the Korean script. In gaming and social media, it can be employed to create invisible names or disguise messages.' },
    wj: { char: '\u2060', name: 'Word Joiner', description: 'Similar to the Zero Width No-Break Space, it prevents line breaks between the characters it separates.' }
  };

  const testArea = document.getElementById('testArea') as HTMLTextAreaElement | null;
  const charCount = document.getElementById('charCount') as HTMLElement | null;
  let lastGeneratedText = '';

  // Utility functions
  function showToast(message: any) {
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.classList.add('show'), 10);
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 2000);
  }

  function showCopiedState(button: any) {
    button.dataset.copied = 'true';
    setTimeout(() => delete button.dataset.copied, 2000);
    showToast('Copied to clipboard!');
  }

  function updateTestArea() {
    if (testArea && charCount) {
      charCount.textContent = testArea.value.length.toString();
    }
  }

  // Method 1: Quick copy buttons
  document.querySelectorAll('.copy-button').forEach(button => {
    button.addEventListener('click', async () => {
      const count = parseInt(button.dataset.count || '1');
      const invisibleText = characters.hangul.char.repeat(count);
      
      try {
        await navigator.clipboard.writeText(invisibleText);
        if (testArea) {
          testArea.value += invisibleText;
          updateTestArea();
        }
        showCopiedState(button);
      } catch (err) {
        showToast('Failed to copy');
      }
    });
  });

  // Method 2: Character selection
  const characterType = document.getElementById('characterType');
  const selectedCharName = document.getElementById('selectedCharName');
  const selectedCharDesc = document.getElementById('selectedCharDesc');
  const copySelected = document.getElementById('copySelected');
  const previewSelected = document.getElementById('previewSelected');

  characterType?.addEventListener('change', () => {
    if (characterType) {
      const selected = characterType.value;
      if (selectedCharName) selectedCharName.textContent = characters[selected].name;
      if (selectedCharDesc) selectedCharDesc.textContent = characters[selected].description;
    }
  });

  copySelected?.addEventListener('click', async () => {
    const selected = characterType.value;
    const invisibleChar = characters[selected].char;
    
    try {
      await navigator.clipboard.writeText(invisibleChar);
      if (testArea) {
        testArea.value += invisibleChar;
        updateTestArea();
      }
      showCopiedState(copySelected);
    } catch (err) {
      showToast('Failed to copy');
    }
  });

  previewSelected?.addEventListener('click', () => {
    const selected = characterType.value;
    const invisibleChar = characters[selected].char;
    
    if (testArea) {
      testArea.value += invisibleChar;
      updateTestArea();
    }
  });

  // Method 3: Custom generator
  const customCharType = document.getElementById('customCharType');
  const customCount = document.getElementById('customCount');
  const generateCustom = document.getElementById('generateCustom');
  const copyCustom = document.getElementById('copyCustom');

  generateCustom?.addEventListener('click', () => {
    const selected = customCharType.value;
    const count = parseInt(customCount.value || '1');
    lastGeneratedText = characters[selected].char.repeat(count);
    
    if (testArea) {
      testArea.value += lastGeneratedText;
      updateTestArea();
    }
    
    showToast('Generated and added to test area!');
  });

  copyCustom?.addEventListener('click', async () => {
    if (lastGeneratedText) {
      try {
        await navigator.clipboard.writeText(lastGeneratedText);
        showCopiedState(copyCustom);
      } catch (err) {
        showToast('Failed to copy');
      }
    } else {
      showToast('Generate text first!');
    }
  });

  // Method 4: Advanced options
  const mixCharacters = document.getElementById('mixCharacters');
  const addPattern = document.getElementById('addPattern');
  const advancedCount = document.getElementById('advancedCount');
  const generateAdvanced = document.getElementById('generateAdvanced');

  generateAdvanced?.addEventListener('click', () => {
    const count = parseInt(advancedCount.value || '20');
    let result = '';
    
    if (mixCharacters.checked) {
      const charTypes = Object.keys(characters);
      for (let i = 0; i < count; i++) {
        const randomType = charTypes[Math.floor(Math.random() * charTypes.length)];
        result += characters[randomType].char;
      }
    } else if (addPattern.checked) {
      const charTypes = Object.keys(characters);
      const patternLength = Math.min(charTypes.length, 3);
      const pattern = charTypes.slice(0, patternLength);
      
      for (let i = 0; i < count; i++) {
        const typeIndex = i % patternLength;
        result += characters[pattern[typeIndex]].char;
      }
    } else {
      result = characters.hangul.char.repeat(count);
    }
    
    lastGeneratedText = result;
    
    if (testArea) {
      testArea.value += result;
      updateTestArea();
    }
    
    showToast('Advanced text generated!');
  });

  // Test area functionality
  const copyTest = document.getElementById('copyTest');
  const clearTest = document.getElementById('clearTest');

  testArea?.addEventListener('input', updateTestArea);

  copyTest?.addEventListener('click', async () => {
    if (testArea?.value) {
      try {
        await navigator.clipboard.writeText(testArea.value);
        showCopiedState(copyTest);
      } catch (err) {
        showToast('Failed to copy');
      }
    } else {
      showToast('Nothing to copy!');
    }
  });

  clearTest?.addEventListener('click', () => {
    if (testArea) {
      testArea.value = '';
      updateTestArea();
      showToast('Test area cleared!');
    }
  });

  // Initialize
  updateTestArea();
</script>